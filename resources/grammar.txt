chunk ::=   block

block ::=   {stat} [retstat]

stat ::=    ‘;’ | varlist ‘=’ explist | label | break | goto Name | do block end | while exp do block end |
            repeat block until exp | if exp then block { elseif exp then block } [else block] end
            | for Name ‘=’ exp ‘,’ exp [‘,’ exp] do block end | for namelist in explist do block end |
            function funcname funcbody |
            local function Name funcbody |
            local namelist [‘=’ explist]

retstat ::= return [explist] [‘;’]

label ::= ‘::’ Name ‘::’

funcname ::= Name {‘.’ Name} [‘:’ Name]

varlist ::= var {‘,’ var}

var ::= Name [prefixexpTail varNameTail] | ‘(’ exp ‘)’ prefixexpTail varNameTail

varNameTail ::= ‘.’ Name | ‘[’ exp ‘]

namelist ::= Name {‘,’ Name}

explist ::= exp {‘,’ exp}

exp ::= nil | false | true | IntLiteral | LiteralString | ‘...’ | functiondef | prefixexp | tableconstructor | exp binop exp | unop exp

binop ::= ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ | ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’ | ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘~=’ | and | or

unop ::= ‘-’ | not | ‘#’ | ‘~’

prefixexp ::= Name prefixexpTail | ‘(’ exp ‘)’ prefixexpTail

prefixexpTail ::=   ‘[’ exp ‘]’ prefixexptail | ‘.’ Name prefixexptail | args prefixexptail |
                    ‘:’ Name args prefixexptail | \epsilon

args ::= `( ́ [explist] `) ́ | tableconstructor | String

functiondef ::= function funcbody

funcbody ::= ‘(’ [parlist] ‘)’ block end

parlist ::= namelist [‘,’ ‘...’] | ‘...’

namelist ::= Name {‘,’ Name}

tableconstructor ::= ‘{’ [fieldlist] ‘}’

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

fieldsep ::= ‘,’ | ‘;’